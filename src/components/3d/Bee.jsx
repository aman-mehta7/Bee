/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 bee.glb 
Author: Jakob Henerey (https://sketchfab.com/hellonintendo8)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/bee-d4683f98637745f1a989bb013215c8de
Title: Bee
*/

import React, { useEffect, useRef, useState } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations, useTexture } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";
import gsap from "gsap";
import { useGSAP} from "@gsap/react";
import ScrollTrigger from 'gsap/ScrollTrigger'
import { Html } from '@react-three/drei';

export function Bee({props,onSentData}) {



    const sendData = () => {
    onSentData('Hello from Child!');
  };




  





  const group = React.useRef();
  const { scene, animations } = useGLTF("/bee.glb");


  // let mixture ;
  //    mixture = new THREE.AnimationMixer(scene);
  //    mixture.clipAction(animations[1]).play();
  //    mixture.update(0.02);

  
 const [first, setfirst] = useState(true);

  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);

useEffect(() => {
  const flag = first ? 1 : 2;

  const prev = actions[animations[flag === 2 ? 1 : 0]?.name];
  const next = actions[animations[flag === 1 ? 1 : 0]?.name];

  if (prev && next && prev !== next) {
    prev.fadeOut(0.5);       // Smoothly fade out over 0.5s
    next.reset().fadeIn(0.5).play(); // Reset, fade in and play
  } else if (next) {
    next.reset().fadeIn(0.5).play(); // In case prev doesn't exist
  }

}, [actions, animations, first]);


 
  const matcapTexture = useTexture("/bronze-bl/bronze_preview.jpg");

  const bodyMaterial = new THREE.MeshPhongMaterial({
    map: matcapTexture,
  });

  const beeRef = useRef();

  // useFrame((_, delta) => {
  //   beeRef.current.rotation.y += delta * 0;
  // });


  useGSAP(() => {
    gsap.registerPlugin(ScrollTrigger)
    gsap.fromTo(
      beeRef.current.position,
      { z: -2000 },
      {
        z: 1000,
        duration: 5,
        // yoyo: true,
        // repeat: -1,
        ease: "sine.inOut",
        scrollTrigger: {
          trigger: "#bee",
          scrub: true,
          start: "top -10%",
          end: "bottom 400%",
          markers: true,
        },
      }
    );
    //     gsap.to(beeRef.current.rotation, {
    //   x: Math.PI * 2,
    //   duration: 4,
    //   repeat: -1,
    //   ease: "none",
    // });
    const bee = beeRef.current.position;
  });


  return (
    <group ref={group} {...props} dispose={null}>
     <Html>
       <button onClick={()=> {setfirst(!first);sendData}} className=" absolute -right-200 top-50 rounded-full text-red-50 p-5 bg-red-500">GO</button>
     </Html>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, -10.73]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="RootNode0_0" scale={0.01}>
                <group name="skeletal1_1">
                  <group name="GLTF_created_0">
                    <primitive
                      ref={beeRef}
                      object={nodes.GLTF_created_0_rootJoint}
                    />
                    <group name="1645859359680_0_111_correction">
                      <group name="1645859359680_0_111" />
                    </group>
                    <mesh>
                      <skinnedMesh
                        name="Object_116"
                        geometry={nodes.Object_116.geometry}
                        material={bodyMaterial}
                        skeleton={nodes.Object_116.skeleton}
                      />
                    </mesh>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/bee.glb");

export default Bee;